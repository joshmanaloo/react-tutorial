{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","slice","length","calculateWinner","setState","concat","step","status","current","winner","moves","map","move","desc","key","jumpTo","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"iPAIA,SAASA,EAAOC,GACd,OACE,4BAAQC,UAAU,SAASC,QAASF,EAAME,SACvC,IACoC,IAFvC,IAGiDF,EAAMG,MAAO,K,IAK5DC,E,2KAYSC,GAAI,IAAD,OACd,OACE,kBAACN,EAAD,CACEI,MAAOG,KAAKN,MAAMO,QAAQF,GAC1BH,QACE,kBAAM,EAAKF,MAAME,QAAQG,Q,+BAgB/B,OACE,6BACE,yBAAKJ,UAAU,aACZK,KAAKE,aAAa,GADrB,IAC0BF,KAAKE,aAAa,GAD5C,IACiDF,KAAKE,aAAa,GAAI,KAEvE,yBAAKP,UAAU,aACZK,KAAKE,aAAa,GADrB,IAC0BF,KAAKE,aAAa,GAD5C,IACiDF,KAAKE,aAAa,GAAI,KAEvE,yBAAKP,UAAU,aACZK,KAAKE,aAAa,GADrB,IAC0BF,KAAKE,aAAa,GAD5C,IACiDF,KAAKE,aAAa,GAAI,U,GA1C3DC,IAAMC,WAiDpBC,E,kDACJ,WAAYX,GAAQ,IAAD,8BACjB,cAAMA,IACDY,MAAQ,CACXC,QAAS,CACP,CACEN,QAASO,MAAM,GAAGC,KAAK,QAG3BC,WAAY,EACZC,SAAS,GATM,E,wDAaPZ,GACV,IAAMQ,EAAUP,KAAKM,MAAMC,QAAQK,MAAM,EAAGZ,KAAKM,MAAMI,WAAa,GAE9DT,EADUM,EAAQA,EAAQM,OAAS,GACjBZ,QAAQW,QAG5BE,EAAgBb,IAAYA,EAAQF,KAKxCE,EAAQF,GAAKC,KAAKM,MAAMK,QAAU,IAAM,IACxCX,KAAKe,SAAS,CACZR,QAASA,EAAQS,OAAO,CAAC,CACrBf,QAASA,KAEbS,WAAYH,EAAQM,OACpBF,SAAUX,KAAKM,MAAMK,a,6BAIlBM,GACLjB,KAAKe,SAAS,CACZL,WAAYO,EACZN,QAAUM,EAAK,IAAO,M,+BAIhB,IAkBJC,EAlBG,OAEDX,EAAUP,KAAKM,MAAMC,QACrBY,EAAUZ,EAAQP,KAAKM,MAAMI,YAC7BU,EAASN,EAAgBK,EAAQlB,SAEjCoB,EAAQd,EAAQe,KAAI,SAACL,EAAKM,GAC9B,IAAMC,EAAOD,EACX,eAAiBA,EACjB,mBAEA,OACE,wBAAIE,IAAOF,GAAX,KACA,4BAAQ3B,QAAS,kBAAK,EAAK8B,OAAOH,KAAQC,GAD1C,SAeN,OAPaN,EAATE,EAAkB,WAAaA,EAGxB,iBAAmBpB,KAAKM,MAAMK,QAAU,IAAM,KAKvD,yBAAKhB,UAAU,QACb,yBAAKA,UAAU,cACb,kBAACG,EAAD,CACEG,QAASkB,EAAQlB,QACjBL,QAAS,SAACG,GAAD,OAAO,EAAK4B,YAAY5B,OAErC,yBAAKJ,UAAU,aACb,iCAAOuB,EAAP,KACA,gCAAMG,EAAN,W,GA9ESlB,IAAMC,WAyFzB,SAASU,EAAgBb,GAWvB,IAVA,IAAM2B,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEA7B,EAAI,EAAGA,EAAI6B,EAAMf,OAAQd,IAAK,CAAC,IAAD,cACnB6B,EAAM7B,GADa,GAC9B8B,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAI9B,EAAQ4B,IAAM5B,EAAQ4B,KAAO5B,EAAQ6B,IAAM7B,EAAQ4B,KAAO5B,EAAQ8B,GACpE,OAAO9B,EAAQ4B,GAGnB,OAAO,KAnBTG,IAASC,OAAO,kBAAC5B,EAAD,MAAU6B,SAASC,eAAe,W","file":"static/js/main.f8048190.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nfunction Square(props) {\n  return (\n    <button className=\"square\" onClick={props.onClick}>\n      {\" \"}\n      {/*every square that when clicked*/}{\" \"}\n      {/* props.onClick;  //gives a value of 'X */} {props.value}{\" \"}\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n  // constructor(props) {\n  //   //constructing the board\n  //   super(props);\n  //   this.state = {\n  //     squares: Array(9).fill(null), //Make an array of nine filled with null\n  //     xIsNext: true //initial that x is true for the first move\n  //   };\n  // }\n\n\n\n  renderSquare(i) {\n    return (\n      <Square\n        value={this.props.squares[i]} //Calls square class and adds value!\n        onClick={\n          () => this.props.onClick(i) /*This calls the handleClick method*/\n        }\n      />\n    );\n  }\n\n  render() {\n    // const status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\n    // const winner = calculateWinner(this.state.squares); //pass on current state of squares\n    // let status;\n    // if (winner) {\n    //   status = \"Winner: \" + winner; //check if there is winner\n    // } else {\n    //   status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\"); //tell it is someone's turn\n    // }\n\n    return (\n      <div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)} {this.renderSquare(1)} {this.renderSquare(2)}{\" \"}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)} {this.renderSquare(4)} {this.renderSquare(5)}{\" \"}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)} {this.renderSquare(7)} {this.renderSquare(8)}{\" \"}\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {  //constructor for the game!\n    super(props);\n    this.state = {\n      history: [\n        {\n          squares: Array(9).fill(null)\n        }\n      ],\n      stepNumber: 0,\n      xIsNext: true\n    };\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1); //if we go back in time, then make a new move from that point and throw and change that future\n    const current = history[history.length - 1];\n    const squares = current.squares.slice(); //make a copy of squares\n    // squares[i] = 'X';  //add X to the current square\n\n    if (calculateWinner(squares) || squares[i]) {\n      //if we have a winner, or is current square is filled\n      return; //return nothing\n    }\n\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\"; //asks if xisNext is true then 'X' else 'O'\n    this.setState({\n      history: history.concat([{\n          squares: squares,\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext\n    }); //set the state of the square to X in the board\n  }\n\n  jumpTo(step){\n    this.setState({\n      stepNumber: step,  //keep track of the step in every state\n      xIsNext: (step%2) === 0 //if even that means x is next\n    })\n  }\n\n  render() {\n\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n\n    const moves = history.map((step,move) => {\n      const desc = move ?\n        'Go to move #' + move :\n        'Go to game start';\n\n        return(\n          <li key = {move}>  {/*//every move creates a list item and button */}\n          <button onClick={()=> this.jumpTo(move)}>{desc}</button>  {/* //onlclick calls a method to jump into that move*/}\n          </li>\n        );\n    });\n\n    let status;\n\n    if (winner) {status = 'Winner: ' + winner;}\n\n    else{\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            onClick={(i) => this.handleClick(i)}/>\n        </div>\n        <div className=\"game-info\">\n          <div> {status} </div>\n          <ol> {moves} </ol>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n"],"sourceRoot":""}